// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tensorflow/core/framework/full_type.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:tensorflow.FullTypeDef)
pub struct FullTypeDef {
    // message fields
    // @@protoc_insertion_point(field:tensorflow.FullTypeDef.type_id)
    pub type_id: ::protobuf::EnumOrUnknown<FullTypeId>,
    // @@protoc_insertion_point(field:tensorflow.FullTypeDef.args)
    pub args: ::std::vec::Vec<FullTypeDef>,
    // message oneof groups
    pub attr: ::std::option::Option<full_type_def::Attr>,
    // special fields
    // @@protoc_insertion_point(special_field:tensorflow.FullTypeDef.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FullTypeDef {
    fn default() -> &'a FullTypeDef {
        <FullTypeDef as ::protobuf::Message>::default_instance()
    }
}

impl FullTypeDef {
    pub fn new() -> FullTypeDef {
        ::std::default::Default::default()
    }

    // string s = 3;

    pub fn s(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(full_type_def::Attr::S(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_s(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_s(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(full_type_def::Attr::S(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_s(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(full_type_def::Attr::S(v))
    }

    // Mutable pointer to the field.
    pub fn mut_s(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(full_type_def::Attr::S(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(full_type_def::Attr::S(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(full_type_def::Attr::S(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_s(&mut self) -> ::std::string::String {
        if self.has_s() {
            match self.attr.take() {
                ::std::option::Option::Some(full_type_def::Attr::S(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int64 i = 4;

    pub fn i(&self) -> i64 {
        match self.attr {
            ::std::option::Option::Some(full_type_def::Attr::I(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_i(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_i(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(full_type_def::Attr::I(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_i(&mut self, v: i64) {
        self.attr = ::std::option::Option::Some(full_type_def::Attr::I(v))
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type_id",
            |m: &FullTypeDef| { &m.type_id },
            |m: &mut FullTypeDef| { &mut m.type_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "args",
            |m: &FullTypeDef| { &m.args },
            |m: &mut FullTypeDef| { &mut m.args },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "s",
            FullTypeDef::has_s,
            FullTypeDef::s,
            FullTypeDef::set_s,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "i",
            FullTypeDef::has_i,
            FullTypeDef::i,
            FullTypeDef::set_i,
        ));
        oneofs.push(full_type_def::Attr::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FullTypeDef>(
            "FullTypeDef",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FullTypeDef {
    const NAME: &'static str = "FullTypeDef";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_id = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.args.push(is.read_message()?);
                },
                26 => {
                    self.attr = ::std::option::Option::Some(full_type_def::Attr::S(is.read_string()?));
                },
                32 => {
                    self.attr = ::std::option::Option::Some(full_type_def::Attr::I(is.read_int64()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_id != ::protobuf::EnumOrUnknown::new(FullTypeId::TFT_UNSET) {
            my_size += ::protobuf::rt::int32_size(1, self.type_id.value());
        }
        for value in &self.args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.attr {
            match v {
                &full_type_def::Attr::S(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &full_type_def::Attr::I(v) => {
                    my_size += ::protobuf::rt::int64_size(4, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_id != ::protobuf::EnumOrUnknown::new(FullTypeId::TFT_UNSET) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_id))?;
        }
        for v in &self.args {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.attr {
            match v {
                &full_type_def::Attr::S(ref v) => {
                    os.write_string(3, v)?;
                },
                &full_type_def::Attr::I(v) => {
                    os.write_int64(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FullTypeDef {
        FullTypeDef::new()
    }

    fn clear(&mut self) {
        self.type_id = ::protobuf::EnumOrUnknown::new(FullTypeId::TFT_UNSET);
        self.args.clear();
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FullTypeDef {
        static instance: FullTypeDef = FullTypeDef {
            type_id: ::protobuf::EnumOrUnknown::from_i32(0),
            args: ::std::vec::Vec::new(),
            attr: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FullTypeDef {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FullTypeDef").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FullTypeDef {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FullTypeDef {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `FullTypeDef`
pub mod full_type_def {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:tensorflow.FullTypeDef.attr)
    pub enum Attr {
        // @@protoc_insertion_point(oneof_field:tensorflow.FullTypeDef.s)
        S(::std::string::String),
        // @@protoc_insertion_point(oneof_field:tensorflow.FullTypeDef.i)
        I(i64),
    }

    impl ::protobuf::Oneof for Attr {
    }

    impl ::protobuf::OneofFull for Attr {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::FullTypeDef as ::protobuf::MessageFull>::descriptor().oneof_by_name("attr").unwrap()).clone()
        }
    }

    impl Attr {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Attr>("attr")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:tensorflow.FullTypeId)
pub enum FullTypeId {
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_UNSET)
    TFT_UNSET = 0,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_VAR)
    TFT_VAR = 1,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_ANY)
    TFT_ANY = 2,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_PRODUCT)
    TFT_PRODUCT = 3,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_NAMED)
    TFT_NAMED = 4,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_FOR_EACH)
    TFT_FOR_EACH = 20,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_CALLABLE)
    TFT_CALLABLE = 100,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_TENSOR)
    TFT_TENSOR = 1000,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_ARRAY)
    TFT_ARRAY = 1001,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_OPTIONAL)
    TFT_OPTIONAL = 1002,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_LITERAL)
    TFT_LITERAL = 1003,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_ENCODED)
    TFT_ENCODED = 1004,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_SHAPE_TENSOR)
    TFT_SHAPE_TENSOR = 1005,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_BOOL)
    TFT_BOOL = 200,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_UINT8)
    TFT_UINT8 = 201,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_UINT16)
    TFT_UINT16 = 202,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_UINT32)
    TFT_UINT32 = 203,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_UINT64)
    TFT_UINT64 = 204,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_INT8)
    TFT_INT8 = 205,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_INT16)
    TFT_INT16 = 206,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_INT32)
    TFT_INT32 = 207,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_INT64)
    TFT_INT64 = 208,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_HALF)
    TFT_HALF = 209,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_FLOAT)
    TFT_FLOAT = 210,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_DOUBLE)
    TFT_DOUBLE = 211,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_BFLOAT16)
    TFT_BFLOAT16 = 215,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_COMPLEX64)
    TFT_COMPLEX64 = 212,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_COMPLEX128)
    TFT_COMPLEX128 = 213,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_STRING)
    TFT_STRING = 214,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_DATASET)
    TFT_DATASET = 10102,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_RAGGED)
    TFT_RAGGED = 10103,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_ITERATOR)
    TFT_ITERATOR = 10104,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_MUTEX_LOCK)
    TFT_MUTEX_LOCK = 10202,
    // @@protoc_insertion_point(enum_value:tensorflow.FullTypeId.TFT_LEGACY_VARIANT)
    TFT_LEGACY_VARIANT = 10203,
}

impl ::protobuf::Enum for FullTypeId {
    const NAME: &'static str = "FullTypeId";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FullTypeId> {
        match value {
            0 => ::std::option::Option::Some(FullTypeId::TFT_UNSET),
            1 => ::std::option::Option::Some(FullTypeId::TFT_VAR),
            2 => ::std::option::Option::Some(FullTypeId::TFT_ANY),
            3 => ::std::option::Option::Some(FullTypeId::TFT_PRODUCT),
            4 => ::std::option::Option::Some(FullTypeId::TFT_NAMED),
            20 => ::std::option::Option::Some(FullTypeId::TFT_FOR_EACH),
            100 => ::std::option::Option::Some(FullTypeId::TFT_CALLABLE),
            1000 => ::std::option::Option::Some(FullTypeId::TFT_TENSOR),
            1001 => ::std::option::Option::Some(FullTypeId::TFT_ARRAY),
            1002 => ::std::option::Option::Some(FullTypeId::TFT_OPTIONAL),
            1003 => ::std::option::Option::Some(FullTypeId::TFT_LITERAL),
            1004 => ::std::option::Option::Some(FullTypeId::TFT_ENCODED),
            1005 => ::std::option::Option::Some(FullTypeId::TFT_SHAPE_TENSOR),
            200 => ::std::option::Option::Some(FullTypeId::TFT_BOOL),
            201 => ::std::option::Option::Some(FullTypeId::TFT_UINT8),
            202 => ::std::option::Option::Some(FullTypeId::TFT_UINT16),
            203 => ::std::option::Option::Some(FullTypeId::TFT_UINT32),
            204 => ::std::option::Option::Some(FullTypeId::TFT_UINT64),
            205 => ::std::option::Option::Some(FullTypeId::TFT_INT8),
            206 => ::std::option::Option::Some(FullTypeId::TFT_INT16),
            207 => ::std::option::Option::Some(FullTypeId::TFT_INT32),
            208 => ::std::option::Option::Some(FullTypeId::TFT_INT64),
            209 => ::std::option::Option::Some(FullTypeId::TFT_HALF),
            210 => ::std::option::Option::Some(FullTypeId::TFT_FLOAT),
            211 => ::std::option::Option::Some(FullTypeId::TFT_DOUBLE),
            215 => ::std::option::Option::Some(FullTypeId::TFT_BFLOAT16),
            212 => ::std::option::Option::Some(FullTypeId::TFT_COMPLEX64),
            213 => ::std::option::Option::Some(FullTypeId::TFT_COMPLEX128),
            214 => ::std::option::Option::Some(FullTypeId::TFT_STRING),
            10102 => ::std::option::Option::Some(FullTypeId::TFT_DATASET),
            10103 => ::std::option::Option::Some(FullTypeId::TFT_RAGGED),
            10104 => ::std::option::Option::Some(FullTypeId::TFT_ITERATOR),
            10202 => ::std::option::Option::Some(FullTypeId::TFT_MUTEX_LOCK),
            10203 => ::std::option::Option::Some(FullTypeId::TFT_LEGACY_VARIANT),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FullTypeId] = &[
        FullTypeId::TFT_UNSET,
        FullTypeId::TFT_VAR,
        FullTypeId::TFT_ANY,
        FullTypeId::TFT_PRODUCT,
        FullTypeId::TFT_NAMED,
        FullTypeId::TFT_FOR_EACH,
        FullTypeId::TFT_CALLABLE,
        FullTypeId::TFT_TENSOR,
        FullTypeId::TFT_ARRAY,
        FullTypeId::TFT_OPTIONAL,
        FullTypeId::TFT_LITERAL,
        FullTypeId::TFT_ENCODED,
        FullTypeId::TFT_SHAPE_TENSOR,
        FullTypeId::TFT_BOOL,
        FullTypeId::TFT_UINT8,
        FullTypeId::TFT_UINT16,
        FullTypeId::TFT_UINT32,
        FullTypeId::TFT_UINT64,
        FullTypeId::TFT_INT8,
        FullTypeId::TFT_INT16,
        FullTypeId::TFT_INT32,
        FullTypeId::TFT_INT64,
        FullTypeId::TFT_HALF,
        FullTypeId::TFT_FLOAT,
        FullTypeId::TFT_DOUBLE,
        FullTypeId::TFT_BFLOAT16,
        FullTypeId::TFT_COMPLEX64,
        FullTypeId::TFT_COMPLEX128,
        FullTypeId::TFT_STRING,
        FullTypeId::TFT_DATASET,
        FullTypeId::TFT_RAGGED,
        FullTypeId::TFT_ITERATOR,
        FullTypeId::TFT_MUTEX_LOCK,
        FullTypeId::TFT_LEGACY_VARIANT,
    ];
}

impl ::protobuf::EnumFull for FullTypeId {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FullTypeId").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            FullTypeId::TFT_UNSET => 0,
            FullTypeId::TFT_VAR => 1,
            FullTypeId::TFT_ANY => 2,
            FullTypeId::TFT_PRODUCT => 3,
            FullTypeId::TFT_NAMED => 4,
            FullTypeId::TFT_FOR_EACH => 5,
            FullTypeId::TFT_CALLABLE => 6,
            FullTypeId::TFT_TENSOR => 7,
            FullTypeId::TFT_ARRAY => 8,
            FullTypeId::TFT_OPTIONAL => 9,
            FullTypeId::TFT_LITERAL => 10,
            FullTypeId::TFT_ENCODED => 11,
            FullTypeId::TFT_SHAPE_TENSOR => 12,
            FullTypeId::TFT_BOOL => 13,
            FullTypeId::TFT_UINT8 => 14,
            FullTypeId::TFT_UINT16 => 15,
            FullTypeId::TFT_UINT32 => 16,
            FullTypeId::TFT_UINT64 => 17,
            FullTypeId::TFT_INT8 => 18,
            FullTypeId::TFT_INT16 => 19,
            FullTypeId::TFT_INT32 => 20,
            FullTypeId::TFT_INT64 => 21,
            FullTypeId::TFT_HALF => 22,
            FullTypeId::TFT_FLOAT => 23,
            FullTypeId::TFT_DOUBLE => 24,
            FullTypeId::TFT_BFLOAT16 => 25,
            FullTypeId::TFT_COMPLEX64 => 26,
            FullTypeId::TFT_COMPLEX128 => 27,
            FullTypeId::TFT_STRING => 28,
            FullTypeId::TFT_DATASET => 29,
            FullTypeId::TFT_RAGGED => 30,
            FullTypeId::TFT_ITERATOR => 31,
            FullTypeId::TFT_MUTEX_LOCK => 32,
            FullTypeId::TFT_LEGACY_VARIANT => 33,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FullTypeId {
    fn default() -> Self {
        FullTypeId::TFT_UNSET
    }
}

impl FullTypeId {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FullTypeId>("FullTypeId")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)tensorflow/core/framework/full_type.proto\x12\ntensorflow\"\x93\x01\n\
    \x0bFullTypeDef\x12/\n\x07type_id\x18\x01\x20\x01(\x0e2\x16.tensorflow.F\
    ullTypeIdR\x06typeId\x12+\n\x04args\x18\x02\x20\x03(\x0b2\x17.tensorflow\
    .FullTypeDefR\x04args\x12\x0e\n\x01s\x18\x03\x20\x01(\tH\0R\x01s\x12\x0e\
    \n\x01i\x18\x04\x20\x01(\x03H\0R\x01iB\x06\n\x04attr*\xda\x04\n\nFullTyp\
    eId\x12\r\n\tTFT_UNSET\x10\0\x12\x0b\n\x07TFT_VAR\x10\x01\x12\x0b\n\x07T\
    FT_ANY\x10\x02\x12\x0f\n\x0bTFT_PRODUCT\x10\x03\x12\r\n\tTFT_NAMED\x10\
    \x04\x12\x10\n\x0cTFT_FOR_EACH\x10\x14\x12\x10\n\x0cTFT_CALLABLE\x10d\
    \x12\x0f\n\nTFT_TENSOR\x10\xe8\x07\x12\x0e\n\tTFT_ARRAY\x10\xe9\x07\x12\
    \x11\n\x0cTFT_OPTIONAL\x10\xea\x07\x12\x10\n\x0bTFT_LITERAL\x10\xeb\x07\
    \x12\x10\n\x0bTFT_ENCODED\x10\xec\x07\x12\x15\n\x10TFT_SHAPE_TENSOR\x10\
    \xed\x07\x12\r\n\x08TFT_BOOL\x10\xc8\x01\x12\x0e\n\tTFT_UINT8\x10\xc9\
    \x01\x12\x0f\n\nTFT_UINT16\x10\xca\x01\x12\x0f\n\nTFT_UINT32\x10\xcb\x01\
    \x12\x0f\n\nTFT_UINT64\x10\xcc\x01\x12\r\n\x08TFT_INT8\x10\xcd\x01\x12\
    \x0e\n\tTFT_INT16\x10\xce\x01\x12\x0e\n\tTFT_INT32\x10\xcf\x01\x12\x0e\n\
    \tTFT_INT64\x10\xd0\x01\x12\r\n\x08TFT_HALF\x10\xd1\x01\x12\x0e\n\tTFT_F\
    LOAT\x10\xd2\x01\x12\x0f\n\nTFT_DOUBLE\x10\xd3\x01\x12\x11\n\x0cTFT_BFLO\
    AT16\x10\xd7\x01\x12\x12\n\rTFT_COMPLEX64\x10\xd4\x01\x12\x13\n\x0eTFT_C\
    OMPLEX128\x10\xd5\x01\x12\x0f\n\nTFT_STRING\x10\xd6\x01\x12\x10\n\x0bTFT\
    _DATASET\x10\xf6N\x12\x0f\n\nTFT_RAGGED\x10\xf7N\x12\x11\n\x0cTFT_ITERAT\
    OR\x10\xf8N\x12\x13\n\x0eTFT_MUTEX_LOCK\x10\xdaO\x12\x17\n\x12TFT_LEGACY\
    _VARIANT\x10\xdbOB\x81\x01\n\x18org.tensorflow.frameworkB\x0eFullTypePro\
    tosP\x01ZPgithub.com/tensorflow/tensorflow/tensorflow/go/core/framework/\
    full_type_go_proto\xf8\x01\x01b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(FullTypeDef::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(FullTypeId::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
